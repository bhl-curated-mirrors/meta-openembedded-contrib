From a556f485cedd59221a6768b5e41b75a98e41b894 Mon Sep 17 00:00:00 2001
From: Changqing Li <changqing.li@windriver.com>
Date: Fri, 1 Mar 2024 15:46:11 +0800
Subject: [PATCH] deps: disable io_uring support in libuv

Refer [1], Pseudo fails to intercept some of the syscalls when io_uring
enabled. Refer [2], always disable io_uring support in libuv to fix
issue in [1].

Revert "src: remove uv__node_patch_is_using_io_uring"

[1] https://git.openembedded.org/meta-openembedded/commit/?id=d08453978c31ee41d28206c6ff198d7d9d701d88
[2] https://github.com/nodejs/node/commit/686da19abb

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Changqing Li <changqing.li@windriver.com>
Signed-off-by: Martin Jansa <martin.jansa@gmail.com>
---
 deps/uv/src/unix/linux.c | 33 +++++++--------------------------
 src/node_credentials.cc  | 28 +++++++++++++++++++++++-----
 2 files changed, 30 insertions(+), 31 deletions(-)

diff --git a/deps/uv/src/unix/linux.c b/deps/uv/src/unix/linux.c
index 803a9a9d3f0..46b5886f16d 100644
--- a/deps/uv/src/unix/linux.c
+++ b/deps/uv/src/unix/linux.c
@@ -465,35 +465,16 @@ static int uv__use_io_uring(void) {
   /* See https://github.com/libuv/libuv/issues/4283. */
   return 0; /* Random SIGSEGV in signal handler. */
 #else
-  /* Ternary: unknown=0, yes=1, no=-1 */
-  static _Atomic int use_io_uring;
-  char* val;
-  int use;
-
-  use = atomic_load_explicit(&use_io_uring, memory_order_relaxed);
-
-  if (use == 0) {
-    use = uv__kernel_version() >=
-#if defined(__hppa__)
-    /* io_uring first supported on parisc in 6.1, functional in .51 */
-    /* https://lore.kernel.org/all/cb912694-b1fe-dbb0-4d8c-d608f3526905@gmx.de/ */
-    /* 6.1.51 */ 0x060133
-#else
-    /* Older kernels have a bug where the sqpoll thread uses 100% CPU. */
-    /* 5.10.186 */ 0x050ABA
+  return 0; /* pseudo doesn't support io_uring https://bugzilla.yoctoproject.org/show_bug.cgi?id=15244 */
 #endif
-    ? 1 : -1;
+}
 
-    /* But users can still enable it if they so desire. */
-    val = getenv("UV_USE_IO_URING");
-    if (val != NULL)
-      use = atoi(val) ? 1 : -1;
 
-    atomic_store_explicit(&use_io_uring, use, memory_order_relaxed);
-  }
-
-  return use > 0;
-#endif
+UV_EXTERN int uv__node_patch_is_using_io_uring(void) {
+  // This function exists only in the modified copy of libuv in the Node.js
+  // repository. Node.js checks if this function exists and, if it does, uses it
+  // to determine whether libuv is using io_uring or not.
+  return uv__use_io_uring();
 }
 
 
diff --git a/src/node_credentials.cc b/src/node_credentials.cc
index 2a7f2e878bc..65fdd145167 100644
--- a/src/node_credentials.cc
+++ b/src/node_credentials.cc
@@ -228,13 +228,31 @@ static gid_t gid_by_name(Isolate* isolate, Local<Value> value) {
   }
 }
 
+#ifdef __linux__
+extern "C" {
+int uv__node_patch_is_using_io_uring(void);
+
+int uv__node_patch_is_using_io_uring(void) __attribute__((weak));
+
+typedef int (*is_using_io_uring_fn)(void);
+}
+#endif  // __linux__
+
 static bool UvMightBeUsingIoUring() {
 #ifdef __linux__
-  // Support for io_uring is only included in libuv 1.45.0 and later. Starting
-  // with 1.49.0 is disabled by default. Check the version in case Node.js is
-  // dynamically to an io_uring-enabled version of libuv.
-  unsigned int version = uv_version();
-  return version >= 0x012d00u && version < 0x013100u;
+  // Support for io_uring is only included in libuv 1.45.0 and later, and only
+  // on Linux (and Android, but there it is always disabled). The patch that we
+  // apply to libuv to work around the io_uring security issue adds a function
+  // that tells us whether io_uring is being used. If that function is not
+  // present, we assume that we are dynamically linking against an unpatched
+  // version.
+  static std::atomic<is_using_io_uring_fn> check =
+      uv__node_patch_is_using_io_uring;
+  if (check == nullptr) {
+    check = reinterpret_cast<is_using_io_uring_fn>(
+        dlsym(RTLD_DEFAULT, "uv__node_patch_is_using_io_uring"));
+  }
+  return uv_version() >= 0x012d00u && (check == nullptr || (*check)());
 #else
   return false;
 #endif
