From a98a151e6fcc84b5b8fe8df1009bbb37a5a12dce Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@gmail.com>
Date: Wed, 11 Dec 2024 11:51:53 +0100
Subject: [PATCH] Revert "lib: add UV_UDP_REUSEPORT for udp"

This reverts commit 337f61fb2577b2d93c6b14b4367839c4305d7780.

Upstream-Status: Pending
---
 lib/dgram.js                                  |  7 +---
 src/udp_wrap.cc                               |  1 -
 test/common/udp.js                            | 24 ------------
 .../test-child-process-dgram-reuseport.js     | 35 -----------------
 test/parallel/test-cluster-dgram-reuseport.js | 39 -------------------
 test/parallel/test-dgram-reuseport.js         | 19 ---------
 6 files changed, 1 insertion(+), 124 deletions(-)
 delete mode 100644 test/common/udp.js
 delete mode 100644 test/parallel/test-child-process-dgram-reuseport.js
 delete mode 100644 test/parallel/test-cluster-dgram-reuseport.js
 delete mode 100644 test/parallel/test-dgram-reuseport.js

diff --git a/lib/dgram.js b/lib/dgram.js
index 2f184887181..f6089aa747d 100644
--- a/lib/dgram.js
+++ b/lib/dgram.js
@@ -72,7 +72,7 @@ const {
 const { UV_UDP_REUSEADDR } = internalBinding('constants').os;
 
 const {
-  constants: { UV_UDP_IPV6ONLY, UV_UDP_REUSEPORT },
+  constants: { UV_UDP_IPV6ONLY },
   UDP,
   SendWrap,
 } = internalBinding('udp_wrap');
@@ -128,7 +128,6 @@ function Socket(type, listener) {
     connectState: CONNECT_STATE_DISCONNECTED,
     queue: undefined,
     reuseAddr: options?.reuseAddr, // Use UV_UDP_REUSEADDR if true.
-    reusePort: options?.reusePort,
     ipv6Only: options?.ipv6Only,
     recvBufferSize,
     sendBufferSize,
@@ -344,10 +343,6 @@ Socket.prototype.bind = function(port_, address_ /* , callback */) {
       flags |= UV_UDP_REUSEADDR;
     if (state.ipv6Only)
       flags |= UV_UDP_IPV6ONLY;
-    if (state.reusePort) {
-      exclusive = true;
-      flags |= UV_UDP_REUSEPORT;
-    }
 
     if (cluster.isWorker && !exclusive) {
       bindServerHandle(this, {
diff --git a/src/udp_wrap.cc b/src/udp_wrap.cc
index f4c20664a38..994176ea630 100644
--- a/src/udp_wrap.cc
+++ b/src/udp_wrap.cc
@@ -231,7 +231,6 @@ void UDPWrap::Initialize(Local<Object> target,
   Local<Object> constants = Object::New(isolate);
   NODE_DEFINE_CONSTANT(constants, UV_UDP_IPV6ONLY);
   NODE_DEFINE_CONSTANT(constants, UV_UDP_REUSEADDR);
-  NODE_DEFINE_CONSTANT(constants, UV_UDP_REUSEPORT);
   target->Set(context,
               env->constants_string(),
               constants).Check();
diff --git a/test/common/udp.js b/test/common/udp.js
deleted file mode 100644
index a94d76fc09e..00000000000
--- a/test/common/udp.js
+++ /dev/null
@@ -1,24 +0,0 @@
-'use strict';
-const dgram = require('dgram');
-
-const options = { type: 'udp4', reusePort: true };
-
-function checkSupportReusePort() {
-  return new Promise((resolve, reject) => {
-    const socket = dgram.createSocket(options);
-    socket.bind(0);
-    socket.on('listening', () => {
-      socket.close(resolve);
-    });
-    socket.on('error', (err) => {
-      console.log('The `reusePort` option is not supported:', err.message);
-      socket.close();
-      reject(err);
-    });
-  });
-}
-
-module.exports = {
-  checkSupportReusePort,
-  options,
-};
diff --git a/test/parallel/test-child-process-dgram-reuseport.js b/test/parallel/test-child-process-dgram-reuseport.js
deleted file mode 100644
index 4eea13c525b..00000000000
--- a/test/parallel/test-child-process-dgram-reuseport.js
+++ /dev/null
@@ -1,35 +0,0 @@
-'use strict';
-const common = require('../common');
-const { checkSupportReusePort, options } = require('../common/udp');
-const assert = require('assert');
-const child_process = require('child_process');
-const dgram = require('dgram');
-
-if (!process.env.isWorker) {
-  checkSupportReusePort().then(() => {
-    const socket = dgram.createSocket(options);
-    socket.bind(0, common.mustCall(() => {
-      const port = socket.address().port;
-      const workerOptions = { env: { ...process.env, isWorker: 1, port } };
-      let count = 2;
-      for (let i = 0; i < 2; i++) {
-        const worker = child_process.fork(__filename, workerOptions);
-        worker.on('exit', common.mustCall((code) => {
-          assert.strictEqual(code, 0);
-          if (--count === 0) {
-            socket.close();
-          }
-        }));
-      }
-    }));
-  }, () => {
-    common.skip('The `reusePort` is not supported');
-  });
-  return;
-}
-
-const socket = dgram.createSocket(options);
-
-socket.bind(+process.env.port, common.mustCall(() => {
-  socket.close();
-}));
diff --git a/test/parallel/test-cluster-dgram-reuseport.js b/test/parallel/test-cluster-dgram-reuseport.js
deleted file mode 100644
index da7a90337c8..00000000000
--- a/test/parallel/test-cluster-dgram-reuseport.js
+++ /dev/null
@@ -1,39 +0,0 @@
-'use strict';
-const common = require('../common');
-if (common.isWindows)
-  common.skip('dgram clustering is currently not supported on windows.');
-
-const { checkSupportReusePort, options } = require('../common/udp');
-const assert = require('assert');
-const cluster = require('cluster');
-const dgram = require('dgram');
-
-if (cluster.isPrimary) {
-  checkSupportReusePort().then(() => {
-    cluster.fork().on('exit', common.mustCall((code) => {
-      assert.strictEqual(code, 0);
-    }));
-  }, () => {
-    common.skip('The `reusePort` option is not supported');
-  });
-  return;
-}
-
-let waiting = 2;
-function close() {
-  if (--waiting === 0)
-    cluster.worker.disconnect();
-}
-
-// Test if the worker requests the main process to create a socket
-cluster._getServer = common.mustNotCall();
-
-const socket1 = dgram.createSocket(options);
-const socket2 = dgram.createSocket(options);
-
-socket1.bind(0, () => {
-  socket2.bind(socket1.address().port, () => {
-    socket1.close(close);
-    socket2.close(close);
-  });
-});
diff --git a/test/parallel/test-dgram-reuseport.js b/test/parallel/test-dgram-reuseport.js
deleted file mode 100644
index e5fd6965818..00000000000
--- a/test/parallel/test-dgram-reuseport.js
+++ /dev/null
@@ -1,19 +0,0 @@
-'use strict';
-const common = require('../common');
-const { checkSupportReusePort, options } = require('../common/udp');
-const dgram = require('dgram');
-
-function test() {
-  const socket1 = dgram.createSocket(options);
-  const socket2 = dgram.createSocket(options);
-  socket1.bind(0, common.mustCall(() => {
-    socket2.bind(socket1.address().port, common.mustCall(() => {
-      socket1.close();
-      socket2.close();
-    }));
-  }));
-}
-
-checkSupportReusePort().then(test, () => {
-  common.skip('The `reusePort` option is not supported');
-});
